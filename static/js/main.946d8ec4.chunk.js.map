{"version":3,"sources":["components/Search.js","components/DisplayStocks.js","components/StockApp.js","App.js","serviceWorker.js","index.js"],"names":["Search","stocks","setStocks","useState","query","setQuery","results","setResults","message","setMessage","suggestions","setSuggestions","errorS","useEffect","axios","get","url","then","response","console","log","data","map","res","symbol","addHelper","stock","formatS","toUpperCase","includes","concat","Grid","centered","columns","Column","width","Message","negative","Header","Input","className","icon","Icon","name","inverted","circular","link","color","onClick","onChange","e","value","target","length","regex","RegExp","filter","v","test","slice","onKeyPress","keyCode","charCode","preventDefault","type","placeholder","fluid","focus","size","List","divided","selection","verticalAlign","s","Item","key","Content","DisplayStocks","stockTable","captured","idx","Table","Row","Cell","hasOwnProperty","single_exp_return","std","weight","textAlign","selectable","StockApp","setStockTable","loading","setLoading","display","unstackable","celled","HeaderCell","Body","Button","searchURL","join","disabled","Segment","padded","as","App","Container","Boolean","window","location","hostname","match","require","config","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.946d8ec4.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport { List, Input, Grid, Icon,  Message } from 'semantic-ui-react'\nimport './Search.css'\nconst Search = ({stocks, setStocks})=>{\n    const [query, setQuery] = useState('');\n    const [results, setResults] = useState([]);\n    const [message, setMessage] = useState('');\n    const [suggestions, setSuggestions] = useState([]);\n    const stockDisplayLimit = 10;\n    const errorS = message? 'error SearchBar' : 'SearchBar' ;\n    \n    useEffect(()=>{\n    const url = 'https://cloud.iexapis.com/stable/';\n    const token = '?token=pk_52ae86a3ff14418d86666498498aa228';\n\n    const searchURL = url+'/ref-data/iex/symbols'+token;\n    axios\n        .get(searchURL)\n        .then(response=>{\n            console.log(response);\n            setResults(response.data.map(res=>res.symbol));\n        });\n    },[]);\n    \n    const addHelper = (stock) =>{\n        const formatS = stock.toUpperCase();\n        if (results.includes(formatS) && !stocks.includes(formatS)) {\n            setStocks(stocks.concat(formatS));\n            setQuery('');\n            setSuggestions([]);\n            setMessage('')\n        }\n        else{\n            setMessage('Unique or Valid Stock Symbols Only');\n        }\n    }\n\n    const handleEnter = (e) =>{\n        const code = e.keyCode || e.charCode;\n        if(code === 13){\n            e.preventDefault();\n            addHelper(query);\n        }\n    }\n\n    const handleTextChange = (e) => {\n        const value = e.target.value;\n        setQuery(value);\n        setSuggestions([]);\n        if(value.length > 0){\n            const regex = new RegExp(`^${value}`, 'i');\n            setSuggestions(results.filter(v => (regex.test(v) && !stocks.includes(v))).slice(0,stockDisplayLimit));\n        }\n        \n    }\n\n    const renderSuggestions = () => {\n        return suggestions.map((s) => {\n            return(\n                <List.Item\n                onClick={() => addHelper(s)}\n\n                    key = {s} \n                >\n                    \n                    <List.Content>\n                        <List.Header\n                                                   >\n                            {s}\n                        </List.Header>\n                    </List.Content>\n                </List.Item>\n            )\n        \n\n        });\n    }\n    const renderList = ()=>{\n        return (\n        <List divided selection verticalAlign='middle' \n        className= 'SearchList'>\n            {renderSuggestions()}\n        </List>\n        )\n    }\n    const renderErrorMessage = ()=>{\n        const errorNotification = message \n            ? (< Message negative>\n                <Message.Header>{message}\n                </Message.Header>\n               </ Message>)\n            : '';\n        return errorNotification;\n    }\n\n    return (\n            <Grid centered columns={1} >\n                <Grid.Column width ={8}>\n                    {renderErrorMessage()}\n                    <Input\n                        className={errorS}\n                        icon ={\n                            <Icon name='add'  inverted circular link color = 'blue' \n                            onClick ={()=>{addHelper(query)}}\n                            />}\n                        onChange={handleTextChange}\n                        onKeyPress={handleEnter}\n                        value={query}\n                        type='text'\n                        placeholder='Enter Portfolio (ex: GOOG...)'\n                        fluid\n                        focus\n                        size = 'large'\n                    />\n                    {!(suggestions.length === 0) && renderList()}\n\n\n                </Grid.Column>\n\n            </Grid>\n    )\n}\n\nexport default Search;","import React from 'react';\nimport { Icon, Table} from 'semantic-ui-react';\n\nconst DisplayStocks = ({stockTable, stocks,setStocks}) =>{\n    const captured = stockTable\n\n    const removeStock = (s)=>{\n        setStocks(stocks.filter(stock=>{\n            return stock !== s;\n        }));\n    }\n    \n    return (\n        stocks.map((stock,idx)=>{\n            return (\n                <Table.Row key = {idx}>\n                    <Table.Cell>{stock}</Table.Cell>\n                    <Table.Cell>{captured.hasOwnProperty(stock) && captured[stock].single_exp_return * 252 * 100}</Table.Cell>\n                    <Table.Cell>{captured.hasOwnProperty(stock) && captured[stock].std}</Table.Cell>\n                    <Table.Cell>{captured.hasOwnProperty(stock) && captured[stock].weight * 100}</Table.Cell>\n                    <Table.Cell textAlign='center' selectable>\n                                <Icon \n                                    name='remove'\n                                    onClick={() => removeStock(stock)}\n                                    value={stock}\n                                    color = 'red'\n                                />\n\n\n                    </Table.Cell>\n                    \n                </Table.Row>\n\n\n            )\n\n        }\n\n        )\n \n    )\n\n}\n\nexport default DisplayStocks;","import React, {useState} from 'react';\nimport Search from './Search';\nimport Displaystocks from './DisplayStocks';\nimport axios from 'axios'\nimport { Segment,Header,Grid, Button, Table} from 'semantic-ui-react';\nconst StockApp = ()=>{\n    const [stocks, setStocks] = useState([]);\n    const [stockTable, setStockTable] = useState({});\n    const [loading, setLoading] = useState(false);\n\n    const handleCalculate = (e)=>{\n        e.preventDefault();\n        setLoading(true);\n        const searchURL = 'https://stock-back-api.herokuapp.com/optimize/' + stocks.join(',') + '?format=json'\n        axios\n        .get(searchURL)\n        .then(response=>{\n            console.log(response);\n            setStockTable(response.data);\n        })\n        .then(response=>{\n            setLoading(false);\n        });\n\n    }\n    \n    const display =  \n          <Grid divided='vertically'>\n            <Grid.Row>\n                <Search\n                    stocks={stocks}\n                    setStocks={setStocks}\n                />\n            </Grid.Row>\n            <Grid.Row>\n                <Table unstackable celled>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Symbol</Table.HeaderCell>\n                            <Table.HeaderCell>Log Return % ANNUAL</Table.HeaderCell>\n                            <Table.HeaderCell>StDev</Table.HeaderCell>\n                            <Table.HeaderCell>Optimal Asset %</Table.HeaderCell>\n                            <Table.HeaderCell>Close</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        <Displaystocks\n                            stockTable = {stockTable}\n                            stocks={stocks}\n                            setStocks={setStocks}\n                        />\n                        <Table.Row>\n                            <Table.Cell>Total Results </Table.Cell>\n                            <Table.Cell>{stockTable.hasOwnProperty('exp_return') && stockTable['exp_return'] * 100}</Table.Cell>\n                            <Table.Cell>{stockTable.hasOwnProperty('stdev') && stockTable['stdev']}</Table.Cell>\n                            <Table.Cell></Table.Cell>\n                            <Table.Cell></Table.Cell>\n                        </Table.Row>\n                    </Table.Body>\n                </Table>\n\n\n\n            </Grid.Row>\n            <Grid.Row>\n                <Button \n                    onClick = {handleCalculate}\n                    disabled = {loading}\n                    loading = {loading}\n\n                >\n                    Calculate All\n                </Button>\n            </Grid.Row>\n        </Grid>\n\n    return (\n        <Segment padded>\n            <Header as='h2' textAlign='center'>Discover Your Best.\n            </Header>\n            <Header as='h1' textAlign='center'>\n            Find your optimal stock portfolio based on modern portfolio theory.\n            </Header>\n            <Header as='h3' textAlign='center'>\n                Enter stock combinations and find out what percentage of your portfolio a particular stock should take.\n            </Header>\n\n           <div> \n               {display}\n           </div>\n            \n        </Segment>\n        \n    )\n}\n\nexport default StockApp;","import React from 'react';\nimport './App.css';\nimport StockApp from './components/StockApp';\nimport { Container } from 'semantic-ui-react';\n\nfunction App() {\n  return (\n    <Container>\n\n      <StockApp/>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nrequire('dotenv').config()\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}